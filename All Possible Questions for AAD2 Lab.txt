âœ… 1. BFS â€“ Possible Questions (Unweighted Shortest Path)
ðŸ“Œ Q: Find the shortest path between two nodes in an undirected graph using BFS.
Variants:

Output path from source to destination

Output distance from source to all other nodes

âœ… Java Code (BFS Shortest Path)
java
Copy
Edit
import java.util.*;

public class BFSShortestPath {
    static void bfs(Map<Character, List<Character>> graph, char src, char dest) {
        Queue<Character> queue = new LinkedList<>();
        Map<Character, Boolean> visited = new HashMap<>();
        Map<Character, Character> parent = new HashMap<>();

        queue.add(src);
        visited.put(src, true);
        parent.put(src, null);

        while (!queue.isEmpty()) {
            char curr = queue.poll();
            for (char neighbor : graph.get(curr)) {
                if (!visited.containsKey(neighbor)) {
                    queue.add(neighbor);
                    visited.put(neighbor, true);
                    parent.put(neighbor, curr);
                    if (neighbor == dest) break;
                }
            }
        }

        // Print path from src to dest
        List<Character> path = new ArrayList<>();
        for (char v = dest; v != 0; v = parent.get(v)) {
            path.add(v);
            if (v == src) break;
        }
        Collections.reverse(path);
        System.out.println("Path: " + path);
    }

    public static void main(String[] args) {
        Map<Character, List<Character>> graph = new HashMap<>();
        for (char c = 'a'; c <= 'h'; c++) graph.put(c, new ArrayList<>());
        graph.get('a').addAll(Arrays.asList('b', 'c'));
        graph.get('b').add('a');
        graph.get('c').addAll(Arrays.asList('a', 'f'));
        graph.get('f').addAll(Arrays.asList('c', 'g'));
        graph.get('g').addAll(Arrays.asList('f', 'd'));
        graph.get('d').addAll(Arrays.asList('g', 'e', 'h'));
        graph.get('e').addAll(Arrays.asList('d', 'h'));
        graph.get('h').addAll(Arrays.asList('d', 'e'));

        bfs(graph, 'a', 'h');
    }
}
âœ… 2. DFS â€“ Possible Questions
ðŸ“Œ Q: Use DFS to:
Traverse all nodes

Detect a cycle in directed graph

Detect a cycle in undirected graph

Topological Sort (advanced)

âœ… Java Code â€“ Cycle Detection in Directed Graph
java
Copy
Edit
import java.util.*;

public class DFSCycleDirected {
    static boolean dfs(int v, List<List<Integer>> adj, boolean[] visited, boolean[] recStack) {
        visited[v] = true;
        recStack[v] = true;

        for (int neighbor : adj.get(v)) {
            if (!visited[neighbor]) {
                if (dfs(neighbor, adj, visited, recStack)) return true;
            } else if (recStack[neighbor]) {
                return true; // cycle found
            }
        }

        recStack[v] = false;
        return false;
    }

    public static void main(String[] args) {
        int V = 4;
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());

        adj.get(0).add(1);
        adj.get(1).add(2);
        adj.get(2).add(0);
        adj.get(2).add(3);

        boolean[] visited = new boolean[V];
        boolean[] recStack = new boolean[V];

        boolean hasCycle = false;
        for (int i = 0; i < V; i++) {
            if (!visited[i] && dfs(i, adj, visited, recStack)) {
                hasCycle = true;
                break;
            }
        }

        System.out.println("Graph contains cycle: " + hasCycle);
    }
}
âœ… 3. Graph â€“ Representation + Adjacency List
ðŸ“Œ Q: Write a program to represent a graph using adjacency list.
Variants:

Undirected or Directed

Weighted or Unweighted

âœ… Java Code â€“ Undirected Graph (Adjacency List)
java
Copy
Edit
import java.util.*;

public class GraphRepresentation {
    public static void main(String[] args) {
        int V = 5;
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++)
            adj.add(new ArrayList<>());

        // Add edges (undirected)
        addEdge(adj, 0, 1);
        addEdge(adj, 0, 4);
        addEdge(adj, 1, 2);
        addEdge(adj, 1, 3);
        addEdge(adj, 1, 4);
        addEdge(adj, 2, 3);
        addEdge(adj, 3, 4);

        printGraph(adj);
    }

    static void addEdge(List<List<Integer>> adj, int u, int v) {
        adj.get(u).add(v);
        adj.get(v).add(u);
    }

    static void printGraph(List<List<Integer>> adj) {
        for (int i = 0; i < adj.size(); i++) {
            System.out.print("Vertex " + i + ": ");
            for (int neighbor : adj.get(i)) {
                System.out.print(neighbor + " ");
            }
            System.out.println();
        }
    }
}
âœ… 4. Quick Sort â€“ Possible Questions
ðŸ“Œ Q: Sort an array using Quick Sort algorithm (ascending).
Efficient for average-case

Should be implemented using recursion

âœ… Java Code â€“ Quick Sort
java
Copy
Edit
public class QuickSort {
    static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp;
            }
        }
        int temp = arr[i+1]; arr[i+1] = arr[high]; arr[high] = temp;
        return i + 1;
    }

    public static void main(String[] args) {
        int[] arr = {45, 12, 78, 23, 56, 89, 12, 33};
        quickSort(arr, 0, arr.length - 1);
        for (int n : arr) System.out.print(n + " ");
    }
}
âœ… 5. Merge Sort â€“ Possible Questions
ðŸ“Œ Q: Sort an array using Merge Sort algorithm.
Focus on divide-and-conquer

Efficient for worst-case (O(n log n))

âœ… Java Code â€“ Merge Sort
java
Copy
Edit
public class MergeSort {
    static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid+1, right);
            merge(arr, left, mid, right);
        }
    }

    static void merge(int[] arr, int l, int m, int r) {
        int n1 = m - l + 1, n2 = r - m;
        int[] L = new int[n1], R = new int[n2];
        for (int i = 0; i < n1; ++i) L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j];

        int i = 0, j = 0, k = l;
        while (i < n1 && j < n2)
            arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];
        while (i < n1) arr[k++] = L[i++];
        while (j < n2) arr[k++] = R[j++];
    }

    public static void main(String[] args) {
        int[] arr = {1023, 501, 1432, 876, 342};
        mergeSort(arr, 0, arr.length - 1);
        for (int num : arr) System.out.print(num + " ");
    }
}